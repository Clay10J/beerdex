// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: breweries.sql

package database

import (
	"context"
)

const createBrewery = `-- name: CreateBrewery :one
INSERT INTO breweries (brewery_name, city, state)
VALUES (?, ?, ?)
RETURNING brewery_id, brewery_name, created_at, city, state
`

type CreateBreweryParams struct {
	BreweryName string
	City        string
	State       string
}

func (q *Queries) CreateBrewery(ctx context.Context, arg CreateBreweryParams) (Brewery, error) {
	row := q.db.QueryRowContext(ctx, createBrewery, arg.BreweryName, arg.City, arg.State)
	var i Brewery
	err := row.Scan(
		&i.BreweryID,
		&i.BreweryName,
		&i.CreatedAt,
		&i.City,
		&i.State,
	)
	return i, err
}

const deleteBrewery = `-- name: DeleteBrewery :exec

DELETE FROM breweries WHERE brewery_id = ?
`

func (q *Queries) DeleteBrewery(ctx context.Context, breweryID int64) error {
	_, err := q.db.ExecContext(ctx, deleteBrewery, breweryID)
	return err
}

const getBreweries = `-- name: GetBreweries :many

SELECT brewery_id, brewery_name, created_at, city, state FROM breweries
`

func (q *Queries) GetBreweries(ctx context.Context) ([]Brewery, error) {
	rows, err := q.db.QueryContext(ctx, getBreweries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brewery
	for rows.Next() {
		var i Brewery
		if err := rows.Scan(
			&i.BreweryID,
			&i.BreweryName,
			&i.CreatedAt,
			&i.City,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrewery = `-- name: GetBrewery :one

SELECT brewery_id, brewery_name, created_at, city, state FROM breweries WHERE brewery_id = ?
`

func (q *Queries) GetBrewery(ctx context.Context, breweryID int64) (Brewery, error) {
	row := q.db.QueryRowContext(ctx, getBrewery, breweryID)
	var i Brewery
	err := row.Scan(
		&i.BreweryID,
		&i.BreweryName,
		&i.CreatedAt,
		&i.City,
		&i.State,
	)
	return i, err
}

const updateBreweryByID = `-- name: UpdateBreweryByID :one

UPDATE breweries
SET brewery_name = ?, city = ?, state = ?
WHERE brewery_id = ?
RETURNING brewery_id, brewery_name, created_at, city, state
`

type UpdateBreweryByIDParams struct {
	BreweryName string
	City        string
	State       string
	BreweryID   int64
}

func (q *Queries) UpdateBreweryByID(ctx context.Context, arg UpdateBreweryByIDParams) (Brewery, error) {
	row := q.db.QueryRowContext(ctx, updateBreweryByID,
		arg.BreweryName,
		arg.City,
		arg.State,
		arg.BreweryID,
	)
	var i Brewery
	err := row.Scan(
		&i.BreweryID,
		&i.BreweryName,
		&i.CreatedAt,
		&i.City,
		&i.State,
	)
	return i, err
}
