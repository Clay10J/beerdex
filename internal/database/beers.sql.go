// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: beers.sql

package database

import (
	"context"
)

const createBeer = `-- name: CreateBeer :one
INSERT INTO beers (beer_name, brewery_id, abv, beer_type)
VALUES (?, ?, ?, ?)
RETURNING beer_id, beer_name, brewery_id, abv, created_at, beer_type
`

type CreateBeerParams struct {
	BeerName  string
	BreweryID int64
	Abv       float64
	BeerType  string
}

func (q *Queries) CreateBeer(ctx context.Context, arg CreateBeerParams) (Beer, error) {
	row := q.db.QueryRowContext(ctx, createBeer,
		arg.BeerName,
		arg.BreweryID,
		arg.Abv,
		arg.BeerType,
	)
	var i Beer
	err := row.Scan(
		&i.BeerID,
		&i.BeerName,
		&i.BreweryID,
		&i.Abv,
		&i.CreatedAt,
		&i.BeerType,
	)
	return i, err
}

const deleteBeer = `-- name: DeleteBeer :exec

DELETE FROM beers WHERE beer_id = ?
`

func (q *Queries) DeleteBeer(ctx context.Context, beerID int64) error {
	_, err := q.db.ExecContext(ctx, deleteBeer, beerID)
	return err
}

const getBeer = `-- name: GetBeer :one

SELECT beer_id, beer_name, brewery_id, abv, created_at, beer_type FROM beers WHERE beer_id = ?
`

func (q *Queries) GetBeer(ctx context.Context, beerID int64) (Beer, error) {
	row := q.db.QueryRowContext(ctx, getBeer, beerID)
	var i Beer
	err := row.Scan(
		&i.BeerID,
		&i.BeerName,
		&i.BreweryID,
		&i.Abv,
		&i.CreatedAt,
		&i.BeerType,
	)
	return i, err
}

const getBeers = `-- name: GetBeers :many

SELECT beer_id, beer_name, brewery_id, abv, created_at, beer_type FROM beers
`

func (q *Queries) GetBeers(ctx context.Context) ([]Beer, error) {
	rows, err := q.db.QueryContext(ctx, getBeers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Beer
	for rows.Next() {
		var i Beer
		if err := rows.Scan(
			&i.BeerID,
			&i.BeerName,
			&i.BreweryID,
			&i.Abv,
			&i.CreatedAt,
			&i.BeerType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBeerByID = `-- name: UpdateBeerByID :one

UPDATE beers
SET beer_name = ?, brewery_id = ?, abv = ?, beer_type = ?
WHERE beer_id = ?
RETURNING beer_id, beer_name, brewery_id, abv, created_at, beer_type
`

type UpdateBeerByIDParams struct {
	BeerName  string
	BreweryID int64
	Abv       float64
	BeerType  string
	BeerID    int64
}

func (q *Queries) UpdateBeerByID(ctx context.Context, arg UpdateBeerByIDParams) (Beer, error) {
	row := q.db.QueryRowContext(ctx, updateBeerByID,
		arg.BeerName,
		arg.BreweryID,
		arg.Abv,
		arg.BeerType,
		arg.BeerID,
	)
	var i Beer
	err := row.Scan(
		&i.BeerID,
		&i.BeerName,
		&i.BreweryID,
		&i.Abv,
		&i.CreatedAt,
		&i.BeerType,
	)
	return i, err
}
